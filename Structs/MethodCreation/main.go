package main

import (
	"fmt"
	"time"
)

type Person struct {
	ID    int
	Name  string
	Age   int
	Email string
}

// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã *Person
// –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ
func (p *Person) Introduce() {
	fmt.Printf("üéì Student #%d: %s, %d years old\n", p.ID, p.Name, p.Age)
	fmt.Printf("   üìß Contact: %s\n", p.Email)
}

// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ 1 –≥–æ–¥
func (p *Person) Birthday() {
	p.Age++
}

// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω—è–µ—Ç email —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π,
// –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
func (p *Person) ChangeEmail() {
	var newEmail string
	fmt.Printf("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ #%d: %s, %d years old\n", p.ID, p.Name, p.Age)
	fmt.Scanln(&newEmail)
	p.Email = newEmail
}

// –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—à–µ—Ç
// –≤ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ –≤–µ—Ä–Ω—ë—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
func NewPerson(id int, name string, age int, email string) *Person {
	return &Person{
		ID:    id,
		Name:  name,
		Age:   age,
		Email: email,
	}
}

func main() {
	students := []*Person{}
	id := 0
	name := ""
	age := 0
	email := ""

	for range 2 {
		// –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—á–µ–Ω–∏–∫–∞
		fmt.Printf("id: %d. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞: ", id)
		fmt.Scanln(&name)

		fmt.Printf("id: %d. –ò–º—è: %s. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞: ", id, name)
		fmt.Scanln(&age)

		fmt.Printf("id: %d. –ò–º—è: %s. –í–æ–∑—Ä–∞—Å—Ç: %d. –í–≤–µ–¥–∏—Ç–µ e-mail —É—á–µ–Ω–∏–∫–∞: ", id, name, age)
		fmt.Scanln(&email)

		// —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –∑–∞–ø–∏—Å—å –æ–± —É—á–µ–Ω–∏–∫–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
		fmt.Printf("–ó–∞–ø–∏—Å—å –æ–± —É—á–µ–Ω–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∞! id: %d. –ò–º—è: %s. –í–æ–∑—Ä–∞—Å—Ç: %d. E-mail:%s \n\n", id, name, age, email)

		students = append(students, NewPerson(id, name, age, email))
		// –º–µ–Ω—è–µ–º id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞
		id++
	}

	// –ø—Ä–∏–º–µ–Ω–∏–º –º–µ—Ç–æ–¥—ã Birthday –∏ ChangeEmail –¥–ª—è 1 –≤ —Å–ª–∞–π—Å–µ —É—á–µ–Ω–∏–∫–∞
	students[0].Birthday()
	students[0].ChangeEmail()

	for _, student := range students {
		student.Introduce()
		time.Sleep(2 * time.Second)
	}

}
